library(datasets)
data(iris)
iris
library(mtcars)
library(datasets)
data(mtcars)
mtcars
?debug
q()
pg2 = GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user", "passwd"))
library(httr)
pg2 = GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user", "passwd"))
pg2
names(pg2)
myapp = oauth_app("twitter", key="cxeORgJe3TOxAmA7VyZBmBaXL", secret="JJzqfuEs1noo2grSltO2NI8gUz8OfIE7VUcuyvTDV4GkRbBA3t")
sig = sign_oauth1.0(myapp, token= "2903981012-ttQREO4rCXlDrEMfVxFwzroXzmEf5dZAqfuJJ4p", token_secret = "ojtbAIHKu017FexHmPSyEuNwaFy5BdItbfwLnacjwVWOY")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json2 = jsonLite::fromJSON(toJSON(json1))
json1 = content(homeTL)
json2 = jsonLite::fromJSON(toJSON(json1))
library("rjsonio")
install.packages("rjsonio")
install.packages('RJSONIO')
json2 = jsonLite::fromJSON(toJSON(json1))
library(RJSONIO)
json2 = jsonLite::fromJSON(toJSON(json1))
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1, 1:4]
myapp = oauth_app("github", key="05915120ffd0398a10d1", secret="fce34cc94a30702913e1ce3bc85038fc41f248ad")
oauth_endpoints("github")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
gtoken = config(token = github_token)
library(httpuv)
install.packages("httpuv")
library(httpuv)
req = GET("ttps://api.github.com/users/jtleek/repos", gtoken)
req = GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
myapp = oauth_app("github", key="05915120ffd0398a10d1", secret="fce34cc94a30702913e1ce3bc85038fc41f248ad")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken = config(token = github_token)
req = GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req = GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
gtoken = config(token = github_token)
req = GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
messy_stuff = content(req)
messy_stuff
messydata = content(req)
messy2 = jsonlite::fromJSON(toJSON(messydata))
messy2
df = as.data.frame(messydata)
df
req = GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
messydata = content(req)
df = as.data.frame(messydata)
df = as.data.frame(toJSON(messydata))
df
messydata
stop_for_status(req)
messydata = content(req)
messy2 = jsonlite::fromJSON(toJSON(messydata))
df = as.data.frame(toJSON(messy2))
df
df = as.data.frame(messy2)
df
names(messy2)
select(messy, name)
library(dplyr)
library("dplyr")
select(messy, name)
select(messy2, name)
select(messy2, name, created_at)
acs
install.packages("sqldf")
library(sqldf)
library("sqldf")
acs
fileURL = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
getwd()
setwd("./Coursera/getcleandata")
getwd()
download.file(fileURL, destfile="./acs.csv")
fileURL
ls()
dir()
acs = read.table("./acs.csv")
names(acs)
acs
head(acs)
class(acs)
acs = read.table("./acs.csv", sep=",", header = TRUE)
names(acs)
head(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
names(acs)
acs1 = select(acs, SERIALNO, pwgtp1)
head(acs1)
acs1 = select(acs, SERIALNO, pwgtp1, AGEP)
head(acs1)
filter(acs1, AGEP < 50)
length(filter(acs1, AGEP < 50))
nrow(filter(acs1, AGEP < 50))
acs2 = sqldf("select pwgtp1 from acs where AGEP < 50")
nrow(acs2)
head(acs2)
head(acs1)
acs2 = sqldf("select pwgtp1 from acs where AGEP < 50")
?unique
acs3 = sqldf("select distinct AGEP from acs")
nrow(acs3)
acs4 = unique(acs$AGEP)
nrow(acs4)
acs4
length(acs4)
head(acs3)
length(acs3)
class(acs3)
class(acs4)
acs4(1:10)
acs4[1:10]
head(acs3, 10)
acs5 = sqldf("select AGEP where unique from acs")
acs5 = sqldf("select unique AGEP from acs")
mydata = GET("http://biostat.jhsph.edu/~jleek/contact.html ")
mydata = GET("http://biostat.jhsph.edu/~jleek/contact.html")
content1 = content(mydata, as="text")
content1
parsehtml = htmlParse(content1, asText = TRUE)
library(httr)
parsehtml = htmlParse(content1, asText = TRUE)
parsedhtml = htmlParse(content1, asText = TRUE)
library("XML")
parsedhtml = htmlParse(content1, asText = TRUE)
head(parsedhtml)
xmlSApply(parsedhtml, xmlValue)
class(parsedhtml)
parsedhtml
names(parsedhtml)
pg1 = GET("http://biostat.jhsph.edu/~jleek/contact.html")
names(pg1)
?content
pg2 = content(pg1, as="text")
pg2
pg1
names(pg1)
names(pg2)
class(pg1)
class(pg2)
fileURL = "http://biostat.jhsph.edu/~jleek/contact.html"
doc = htmlTreeParse(fileUrl, useInternal=TRUE)
con  = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
htmlCode(143,)
htmlCode[143,]
class(htmlCode)
htmlCode[143]
length(htmlCode[143])
?chars
?char
nchar(htmlCode[143])
length(htmlCode[20])
htmlCode[20]
nchar(htmlCode[20])
nchar("/t/t")
nchar("\t\t")
?nchar
?readLines
htmlCode[10]
install.packages("stringi")
library(stringi)
library("stringi")
stri_length("\t\t")
nchar(htmlCode[10])
stri_length(htmlCode[10])
stri_length(htmlCode[20])
nchar(htmlCode[20])
nchar(htmlCode[30])
stri_length(htmlCode[30])
nchar(htmlCode[100])
library(utils)
file1 = "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
ff = read.fwf(ff, widths=c(9,5,4,4,5,4,4,5,4,4,5,4,4), skip = 4)
ff = read.fwf(file1, widths=c(9,5,4,4,5,4,4,5,4,4,5,4,4), skip = 4)
class(ff)
head(ff)
ff = read.fwf(file1, widths=c(1,9,5,4,4,5,4,4,5,4,4,5,4,4), skip = 4)
head(ff)
ff1 = head(ff)
ff1
ff1[1,14]
lapply((ff1, sum))
?lapply
lapply(ff1, sum)
?sum
lapply(ff1[,14], sum)
lapply(ff1$v14, sum)
lapply(ff1$v14, mean)
ll1$v14
ff1$v14
ff1
ff1$V14
lapply(ff1$V14, mean)
sum(ff1$V14)
ff1
head(ff1, 20)
head(ff, 20)
sum(ff$V14)
sum(ff$V7)
?rm
rm(list=ls())
ls()
